/*
 * Copyright 2017, 2021 Christoph Böhme et al.
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.regex.Matcher

plugins {
  id 'org.ajoberstar.grgit' version '2.3.0'
  //id 'org.ec4j.editorconfig' version '0.0.3'
  id 'org.sonarqube' version '2.6.2'
  id 'org.xtext.builder' version '4.0.0'
  id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

subprojects {
  ext {
    versions = [
      'ace':              '1.3.3',
      'antlr':            '3.5.2',
      'assertj':          '3.11.1',
      'commons_compress': '1.21',
      'commons_io':       '2.7',
      'dbcp':             '1.4',
      'dspace':           '1.0.0',
      'equalsverifier':   '3.8.2',
      'everit':           '1.14.2',
      'guava':            '32.0.1-jre',
      'jackson':          '2.15.1',
      'jdk':              '11',
      'jdom':             '2.0.6.1',
      'jena':             '3.17.0',
      'jetty':            '9.4.14.v20181114',
      'jndi':             '0.11.4.1',
      'jquery':           '3.3.1-1',
      'jsonpath':         '2.7.0',
      'jsoup':            '1.15.4',
      'junit':            '4.12',
      'junit_jupiter':    '5.8.2',
      'junit_platform':   '1.4.2',
      'mockito':          '2.27.0',
      'opencsv':          '5.9',
      'requirejs':        '2.3.6',
      'slf4j':            '1.7.36',
      'slf4j_mock':       '2.3.0',
      'tukaani':          '1.6',
      'wiremock':         '2.35.0',
      'xalan':            '2.7.0',
      'xtext':            '2.26.0'
    ]
  }
}

ext.scmInfo = getScmInfo()
logger.lifecycle("Making ${scmInfo.type()} build: ${scmInfo.version}")

allprojects {
  group = 'org.metafacture'
  version = scmInfo.version
  ext.mavenName = null
}

configure(subprojects.findAll { it.name != 'metafacture-runner' }) {
  apply plugin: 'java-library'
}

project(':metafacture-runner') {
  apply plugin: 'java'
}

//editorconfig {
//  excludes = [
//    '**/*.beacon',
//    '**/*.bgzf',
//    '**/*.bz2',
//    '**/*.bzip2',
//    '**/*.diff',
//    '**/*.err',
//    '**/*.gzip',
//    '**/*.jfr',
//    '**/*.out',
//    '**/*.vsix',
//    '**/*.xz',
//    '**/.*',
//    '**/bin',
//    '**/generated',
//    '**/includeBenchmark*100000/expected.json',
//    '**/node_modules',
//    '**/out',
//    '**/output-*',
//    '**/xtext-gen',
//    'gradlew*'
//  ]
//}

task editorconfigChecker(type: Exec, group: 'Verification') {
  executable 'misc/bin/editorconfig-checker'
  args('-exclude', '/\\.|/bin/|\\.beacon$|\\.txt\\.|^LICENSE$|^\\.project$|^gradlew.*')
}

task installServer(type: Copy) {
  dependsOn(':metafix-ide:installDist')
  from "metafix-ide/build/install/xtext-server"
  into "metafix-vsc/xtext-server"
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  //editorconfigCheck.dependsOn(editorconfigChecker)
  check.dependsOn(editorconfigChecker)
  check.dependsOn(javadoc)

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(versions.jdk)
    }
  }

  tasks.withType(JavaExec) {
    javaLauncher = javaToolchains.launcherFor {
      languageVersion = java.toolchain.languageVersion
    }
  }

  tasks.withType(JavaCompile) {
    'all -processing -rawtypes -serial'.split().each {
      options.compilerArgs << "-Xlint:${it}"
    }

    options.compilerArgs << '-Werror'
    options.encoding = 'UTF-8'
  }

  task sourceJar(type: Jar) {
    dependsOn tasks.classes
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
    description 'Creates a jar containing the source files of this project.'
    group 'build'
  }

  task javadocJar(type: Jar) {
    dependsOn tasks.javadoc
    from tasks.javadoc
    archiveClassifier = 'javadoc'
    description 'Creates a jar containing the javadoc of this project.'
    group 'build'
  }

  task allDeps(type: DependencyReportTask) {}

  javadoc {
    // Can't exclude generated files based on source path
    // (cf. https://stackoverflow.com/a/47711311).
    //exclude '**/xtext-gen'
    source = source.filter(f -> !f.getPath().contains('xtext-gen'))

    options {
      addBooleanOption 'Xwerror', true
    }
  }

  checkstyle {
    toolVersion '10.21.2'
  }

  test {
    systemProperties['org.slf4j.simpleLogger.defaultLogLevel'] = 'warn'

    testLogging {
      showStandardStreams = true
      exceptionFormat = 'full'
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  publishing {
    publications {
      mavenArtifacts(MavenPublication) {
        from components.java

        afterEvaluate {
          groupId = project.group
          artifactId = project.name

          pom {
            name = project.mavenName ?: project.name
            description = project.description ?: project.name
            url = 'https://github.com/metafacture/metafacture-core'
            inceptionYear = '2011'
            developers {
              developer {
                id = 'mgeipel'
                name = 'Markus M. Geipel'
                email = 'm.geipel@dnb.de'
                url = 'https://github.com/mgeipel'
                roles = ['architect', 'developer']
              }
              developer {
                id = 'cboehme'
                name = 'Christoph Böhme'
                email = 'c.boehme@dnb.de'
                url = 'https://github.com/cboehme'
                roles = ['architect', 'developer']
              }
            }
            organization {
              name = 'Metafacture'
              url = 'https://github.com/metafacture'
            }
            licenses {
              license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }
            mailingLists {
              mailingList {
                name = 'Metafacture Mailing List'
                post = 'metafacture@lists.dnb.de'
                subscribe = 'metafacture-subscribe@lists.dnb.de'
                unsubscribe = 'metafacture-unsubscribe@lists.dnb.de'
                archive = 'http://lists.dnb.de/pipermail/metafacture/'
              }
            }
            scm {
              connection = 'scm:git:https://github.com/metafacture/metafacture-core.git'
              developerConnection = 'scm:git:https://github.com/metafacture/metafacture-core.git'
              url = 'https://github.com/metafacture/metafacture-core'
              tag = rootProject.scmInfo.tag ?: 'HEAD'
            }
            issueManagement {
              system = 'Github'
              url = 'https://github.com/metafacture/metafacture-core/issues'
            }
            ciManagement {
              system = 'Github Actions'
              url = 'https://github.com/metafacture/metafacture-core/actions'
            }
          }
          artifact(sourceJar)
          artifact(javadocJar)
        }
      }
    }
    repositories {
      maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/metafacture/metafacture-core"
        credentials {
          username = System.getenv("GITHUB_ACTOR")
          password = System.getenv("GITHUB_TOKEN")
        }
      }
      if (scmInfo.isRelease && project.hasProperty('releaseRepositoryUrl')) {
        maven {
          url = releaseRepositoryUrl
          credentials {
            username = releaseRepositoryUser
            password = releaseRepositoryPassword
          }
        }
      }
    }
  }

  signing {
    required {
      scmInfo.isRelease
    }
    sign publishing.publications.mavenArtifacts
  }

  task install(dependsOn: publishToMavenLocal,
      description: "Installs the 'archives' artifacts into the local Maven repository. [deprecated]") {
    doFirst { println "This task is deprecated; use 'publishToMavenLocal' instead." }
  }
}

sonarqube {
  properties {
    property 'sonar.exclusions', '**/generated-src/**/*.java'
  }
}

nexusPublishing {
  repositories {
    sonatype ()
  }
}

class ScmInfo {
  def version
  def tag
  def isRelease

  ScmInfo(version, tag, isRelease) {
    if (!isRelease) version += '-SNAPSHOT'

    this.version = version
    this.tag = tag
    this.isRelease = isRelease
  }

  def type() {
    return isRelease ? 'release' : tag != null ? 'release candidate' : 'snapshot'
  }
}

def getScmInfo() {
  def version = null
  def tag = null
  def isRelease = false

  if (project.hasProperty('publishVersion')) {
    version = publishVersion

    def matcher = version =~ /\d+(?:\.\d+)+(-rc\d+)?/
    if (matcher.matches()) {
      tag = getGitTag(version)
      isRelease = matcher.group(1) == null
    }
  }
  else {
    version = grgit != null ? grgit.branch.current().name : rootProject.name
  }

  return new ScmInfo(version, tag, isRelease)
}

def getGitTag(version) {
  if (grgit == null) {
    throw new GradleException('No Git repository found')
  }
  if (!grgit.status().isClean()) {
    throw new GradleException('Working copy has modifications')
  }

  def tagName = "${rootProject.name}-$version"
  for (tag in grgit.tag.list()) {
    if (
      tag.name == tagName && // matching name
      tag.commit == grgit.head() && // pointing at HEAD
      tag.tagger != null && tag.dateTime != null // annotated
    ) {
      return tagName
    }
  }

  throw new GradleException("HEAD has no matching annotated tag: $tagName")
}
